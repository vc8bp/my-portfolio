[
  {
    "slug": "Cosmic-RMS",
    "title": "Cosmic RMS",
    "description": "A comprehensive trading platform enabling management of Net Positions, Market Watch, Order Logs, and trading strategies.",
    "companyProject": true,
    "companyNote": "Built for internal company use - proprietary trading system with restricted access",
    "videoUrl": "/project/cosmic/cosmicrec.mp4",
    "images": [
      {
        "url": "/project/cosmic/image.png",
        "alt": "Dashboard Overview"
      },
      {
        "url": "/project/cosmic/image2.png",
        "alt": "Market Watch and Net Positions"
      }
    ],
    "technologies": [
      "React",
      "Redux",
      "Ag Grid",
      "Chart.js",
      "ECharts",
      "Websockets",
      "Python",
      "SCSS"
    ],
    "content": [
      {
        "title": "Overview",
        "descriptions": [
          "Developed a Risk Management System for HFT.",
          "Provides real-time data streams for effective trading decisions.",
          "Enables comprehensive management of net positions, market watch, and order logs."
        ]
      },
      {
        "title": "Features",
        "descriptions": [
          "Customizable dashboards with real-time analytics.",
          "Interactive tables and dynamic data visualizations.",
          "Real-time graphs including time series, line charts, and heatmaps.",
          "Dynamic PDF report generation for trading insights.",
          "Role-based UI rendering with multiple user roles."
        ]
      }
    ]
  },
  {
    "slug": "Quent-Quest",
    "title": "Quent Quest",
    "description": "A professional coding assessment platform with real-time tracking, secure coding environments, and an intuitive admin dashboard.",
    "companyProject": true,
    "companyNote": "Enterprise solution offered on an on-premise basis to companies",
    "videoUrl": "/project/hrank/demo.mp4",
    "images": [
      {
        "url": "/project/hrank/attemptingTest.png",
        "alt": "Candidate attempting an online test in the platform."
      },
      {
        "url": "/project/hrank/ActivityLogs.png",
        "alt": "Activity logs interface showing user interactions and logs."
      },
      {
        "url": "/project/hrank/addingMcq.png",
        "alt": "Interface for adding a multiple-choice question to the system."
      },
      {
        "url": "/project/hrank/addingSubjectiveQuestion.png",
        "alt": "Interface for adding a subjective question with text input fields."
      },
      {
        "url": "/project/hrank/addingTestCase.png",
        "alt": "Form for adding test cases for coding problems."
      },
      {
        "url": "/project/hrank/candidatesList.png",
        "alt": "List of candidates participating in the recruitment process."
      },
      {
        "url": "/project/hrank/codeBluePrint.png",
        "alt": "Code blueprint interface displaying coding structure or problem setup."
      },
      {
        "url": "/project/hrank/invitingPeople.png",
        "alt": "Interface for inviting users or candidates to the platform."
      },
      {
        "url": "/project/hrank/problemStatment.png",
        "alt": "Problem statement page displaying a coding or logical problem."
      },
      {
        "url": "/project/hrank/questionPage.png",
        "alt": "Question page displaying a set of questions for assessment."
      },
      {
        "url": "/project/hrank/userAttemptDetail.png",
        "alt": "User attempt details with scores and submission history."
      },
      {
        "url": "/project/hrank/utils_frame (8).png",
        "alt": "Utility frame or supporting interface element."
      }
    ]
    ,
    "technologies": [
      "Docker",
      "Node.js",
      "React",
      "Redux",
      "WebSockets",
      "PostgreSQL",
      "Python"
    ],
    "content": [
      {
        "title": "Overview",
        "descriptions": [
          "Developed a professional coding assessment platform with advanced monitoring features.",
          "Provides real-time user activity tracking to monitor progress and interactions during assessments.",
          "Ensures security and isolation using Docker containers for a robust coding environment."
        ]
      },
      {
        "title": "Features",
        "descriptions": [
          "Real-time user activity tracking for monitoring candidate performance.",
          "Secure, containerized coding environments using Docker.",
          "Post-assessment strategy testing for evaluating and improving solutions.",
          "Admin dashboard for seamless test creation, management, and monitoring.",
          "Role-based access control for candidates and administrators."
        ]
      }
    ]
  },

  {
    "slug": "Trading-Project",
    "title": "Trading Project",
    "description": "A high-performance trading system built in C++ utilizing shared memory, inter-process communication, dynamic linking, and real-time data processing.",
    "githubUrl": "https://github.com/vc8bp/Trading-Project/tree/sharedmem",
    "images": [{
      "url": "/project/hft/hftImg.jpeg",
      "alt": "HFT Image"
    }],
    "technologies": [
      "C++",
      "Shared Memory",
      "Inter-Process Communication (IPC)",
      "Dynamic Linking (Shared Libraries)",
      "POSIX Signals",
      "Boost",
      "Multithreading",
      "Asynchronous Processing",
      "Low-latency Data Handling",
      "Modular Architecture"
    ],

    "content": [
      {
        "title": "Overview",
        "descriptions": [
          "Developed a fully modular, low-latency trading system using modern C++.",
          "Designed a multi-process architecture with IPC and shared memory for efficient real-time communication.",
          "Implemented dynamic strategy loading using shared libraries to enable live updates without restarting the system.",
          "Leveraged POSIX signals for inter-process synchronization and lifecycle management."
        ]
      },
      {
        "title": "Features",
        "descriptions": [
          "Shared Memory-based Market Data Feed: High-speed real-time data exchange using Boost.Interprocess, eliminating traditional socket bottlenecks.",
          "Order Management System (OMS): Processes trade orders with minimal latency and updates the order book in real-time using shared memory.",
          "Dynamic Strategy Loading: Trading strategies are implemented as shared objects (`.so`) and can be dynamically linked at runtime, allowing new strategies to be loaded without stopping the system.",
          "Efficient IPC & Synchronization: Processes communicate via shared memory with mutex-based synchronization, ensuring safe concurrent access to critical data.",
          "Asynchronous Event Handling: Boost.Asio is used to implement non-blocking event-driven processing for trading signals, data ingestion, and execution.",
          "Multi-threaded Processing: Each core module (Feed, Strategy, OMS) runs its own worker threads, ensuring smooth parallel execution without blocking critical operations.",
          "Low-latency Execution Pipeline: Optimized memory management and lock-free queues where applicable to reduce processing overhead and ensure high-speed trade execution.",
          "Real-time Performance Monitoring: Integrated logging and benchmarking tools to measure execution times, memory usage, and latency bottlenecks.",
          "Process Management with Signals: Uses UNIX signals (`SIGINT`, `SIGTERM`) to handle system shutdown, error recovery, and safe cleanup of shared memory."
        ]
      }
    ]
  },
  {
    "slug": "chess-game",
    "title": "Chess Game",
    "description": "A chess game built from scratch in React without using any external libraries for rendering or logic, implementing all game mechanics manually.",
    "githubUrl": "https://github.com/vc8bp/chess",
    "liveUrl": "https://cchess.netlify.app/",
    "videoUrl": "",
    "images": [ 
      {
        "url": "/project/chess/moves.png",
        "alt": "chess game Demo"
      }, 
      {
        "url": "/project/chess/start.png",
        "alt": "chess game Demo"
      }, 
      {
        "url": "/project/chess/threat.png",
        "alt": "chess game Demo"
      }, 
      {
        "url": "/project/chess/board.png",
        "alt": "chess game Demo"
      }
    ],
    "technologies": [
      "React",
      "JavaScript",
      "CSS",
      "HTML"
    ],
    "content": [
      {
        "title": "Overview",
        "descriptions": [
          "Built a fully functional chess game using React without relying on any third-party libraries for board rendering or game logic.",
          "Implemented chess rules and mechanics from scratch, including piece movements, checkmate detection, castling, and en passant.",
          "Designed an interactive and responsive chessboard with custom logic for valid move detection and piece handling."
        ]
      },
      {
        "title": "Features",
        "descriptions": [
          "Custom Chess Logic: Developed all chess rules manually, handling piece movement, check/checkmate detection, and special moves like castling and en passant.",
          "Drag-and-Drop Piece Movement: Created a custom piece movement system without using third-party drag-and-drop libraries.",
          "Manual Board Rendering: Built the chessboard and pieces from scratch using HTML, CSS, and React components without any external UI frameworks.",
          "Move Validation & Turn Management: Ensured only legal moves are allowed, switching turns dynamically between white and black players.",
          "Game State Persistence: Stored game progress in local storage to allow resuming unfinished games."
        ]
      }
    ]
  }
  
]